#include "./Shapes.hpp"
#include "./CppOverride.hpp"

namespace CppOverrideTest
{
    class MockRectangle : public Rectangle, public CppOverride::MockClass
    {
        public:
            CO_MOCK_METHOD(bool, operator ==, (const Rectangle&), const)
            inline MockRectangle() : Rectangle(0.f, 0.f) {}
            CO_MOCK_METHOD(void, SetWidth, (float), override);
            CO_MOCK_METHOD(void, SetWidth, (int), override);
            CO_MOCK_METHOD(/* no prepend */, float, GetWidth, (float), (= 1.f), const override);
            CO_MOCK_METHOD(/* no prepend */, void, GetWidth, (float&, float), (/* no default */, = 1.f), override);
            CO_MOCK_METHOD(/* no prepend */, void, GetWidth, (float*, float), (/* no default */, = 1.f), const override);
            CO_MOCK_METHOD(void, SetHeight, (float), override);
            CO_MOCK_METHOD(void, SetHeight, (int), override);
            CO_MOCK_METHOD(/* no prepend */, float, GetHeight, (float), (= 1.f), const override);
            CO_MOCK_METHOD(/* no prepend */, void, GetHeight, (float& outHeight, float multiplier = 1.f), (), override)
            CO_MOCK_METHOD(/* no prepend */, void, GetHeight, (float* outHeight, float multiplier = 1.f), (), const override)
            CO_MOCK_METHOD(/* no prepend */, float, GetArea, (float multiplier = 1.f), (), const override override)
            CO_MOCK_METHOD(/* no prepend */, void, GetArea, (float& outArea, float multiplier = 1.f), (), override)
            CO_MOCK_METHOD(/* no prepend */, void, GetArea, (float* outArea, float multiplier = 1.f), (), const override)
            CO_MOCK_METHOD(/* no prepend */, float, GetPerimeter, (float multiplier = 1.f), (), const override override)
            CO_MOCK_METHOD(/* no prepend */, void, GetPerimeter, (float& outPerimeter, float multiplier = 1.f), (), override)
            CO_MOCK_METHOD(/* no prepend */, void, GetPerimeter, (float* outPerimeter, float multiplier = 1.f), (), const override)

            
            #if 0
            
            inline virtual void SetHeight(int height)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (height));
                Height = height;
            }
            
            inline virtual float GetHeight(float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, float, (multiplier));
                return Height * multiplier;
            }
            
            inline virtual void GetHeight(float& outHeight, float multiplier = 1.f)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outHeight, multiplier));
                outHeight = Height * multiplier;
            }
            
            inline virtual void GetHeight(float* outHeight, float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outHeight, multiplier));
                *outHeight = Height * multiplier;
            }
            
            inline virtual float GetArea(float multiplier = 1.f) const override
            {
                CO_OVERRIDE_IMPL(Overrider, float, (multiplier));
                return Width * Height;
            }
            
            inline virtual void GetArea(float& outArea, float multiplier = 1.f)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outArea, multiplier));
                outArea = Width * Height;
            }
            
            inline virtual void GetArea(float* outArea, float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outArea, multiplier));
                *outArea = Width * Height;
            }
            
            inline virtual float GetPerimeter(float multiplier = 1.f) const override
            {
                CO_OVERRIDE_IMPL(Overrider, float, (multiplier));
                return 2.f * (Width + Height);
            }
            
            inline virtual void GetPerimeter(float& outPerimeter, float multiplier = 1.f)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outPerimeter, multiplier));
                outPerimeter = 2.f * (Width + Height);
            }
            
            inline virtual void GetPerimeter(float* outPerimeter, float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outPerimeter, multiplier));
                *outPerimeter = 2.f * (Width + Height);
            }
            #endif
    };

    #if 0
    template<typename T>
    class Square : public Rectangle
    {
        private:
            T MetaData;
        
        public:
            inline bool operator ==(const Square& other) const
            {
                return  Rectangle::operator==(other) && 
                        GetMetaData() == other.GetMetaData();
            }
            
            inline bool operator !=(const Square& other) const
            {
                return !Square::operator==(other);
            }
            
            inline Square(float size, T metaData) : Rectangle(size, size), MetaData(metaData)
            {}
            
            inline virtual void SetSize(float size)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (size));
                Rectangle::SetWidth(size);
                Rectangle::SetHeight(size);
            }
            
            inline virtual void SetSize(int size)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (size));
                Rectangle::SetWidth(size);
                Rectangle::SetHeight(size);
            }
            
            inline virtual float GetSize(float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, float, (multiplier));
                return Rectangle::GetWidth(multiplier);
            }
            
            inline virtual void GetSize(float& outSize, float multiplier = 1.f)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outSize, multiplier));
                Rectangle::GetWidth(outSize, multiplier);
            }
            
            inline virtual void GetSize(float* outSize, float multiplier = 1.f) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outSize, multiplier));
                Rectangle::GetWidth(outSize, multiplier);
            }
            
            void SetMetaData(T metaData)
            {
                CO_OVERRIDE_IMPL(Overrider, void, (metaData));
                MetaData = metaData;
            }
            
            inline virtual T GetMetaData() const
            {
                CO_OVERRIDE_IMPL(Overrider, T, ());
                return MetaData;
            }
            
            inline virtual void GetMetaData(T& outMetaData) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outMetaData));
                outMetaData = MetaData;
            }
            
            inline virtual void GetMetaData(T* outMetaData) const
            {
                CO_OVERRIDE_IMPL(Overrider, void, (outMetaData));
                *outMetaData = MetaData;
            }
    };
    #endif
}

