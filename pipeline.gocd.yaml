format_version: 10

pipelines:
  CppOverridePipeline:
    snippets:
      ShellRun: &ShellRun
        configuration:
          id: script-executor
          version: "1"
      NotifyPipelineStatus: &NotifyPipelineStatus
        <<: *ShellRun
        options:
          script: |+
            set -e
            source ~/helpers.sh
            if [ ! -e ./ci.log ]; then
              touch ./ci.log
            fi

            if [ ! -z "$PR_ID" ]; then
              ~/Trigger_GH_PR_StatusPipeline.sh \
              --status "failed" \
              --commit "$(cat ./.commit-id)" \
              --repo "CppOverride" \
              --pr "$PR_ID" \
              --stage "$GO_STAGE_NAME" \
              --message "$(cat ./ci.log)"
            fi
    
    group: CppOverride
    label_template: ${COUNT}
    lock_behavior: none
    display_order: -1
    environment_variables:
      USER_ORIGIN: "Neko-Box-Coder"
      BRANCH: "master"
      CI_API_TOKEN: "{{SECRET:[SECRET_CONFIG][CI_API_KEY]}}"
      PR_ID: ""
    materials:
      DummyMaterial:
        git: https://github.com/Neko-Box-Coder/CppOverride.git
        branch: Dummy
        shallow_clone: true
        auto_update: false
        destination: ""
    stages:
    - CheckoutStage:
        fetch_materials: false
        keep_artifacts: false
        clean_workspace: true
        approval:
          type: success
          allow_only_on_success: true
        jobs:
          CheckoutJob:
            artifacts:
            - build:
                source: CppOverride/*
                destination: CppOverride
            tasks:
            
            # Fetching/Creating cache
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      echo Fetching/Creating cache...
                    )
            - exec:
                run_if: passed
                command: sh
                arguments:
                - -c
                - mkdir -p ~/.gitcache
            
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    cd ~/.gitcache
                    if [[ ! -d ~/.gitcache/CppOverride ]]; then
                      git clone --verbose --recursive "https://github.com/neko-box-coder/CppOverride.git"
                    fi
                    cd ./CppOverride && git pull --verbose --no-edit --ff-only origin $(git branch --show-current)
            
            # Clone Branch
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      echo Checking out branch "$BRANCH" at user "$USER_ORIGIN"
                    )
            
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      git clone --verbose --reference ~/.gitcache/CppOverride --recursive -b \
                      "$BRANCH" "https://github.com/$USER_ORIGIN/CppOverride.git"
                    )
            
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      pushd CppOverride
                      git rev-parse HEAD > .commit-id
                      popd
                      cp ./CppOverride/.commit-id ./.commit-id
                    )
    
    - BuildStage:
        fetch_materials: false
        keep_artifacts: false
        clean_workspace: true
        approval:
          type: success
          allow_only_on_success: true
        jobs:
          LinuxBuildJob:
            artifacts:
            - build:
                source: CppOverride/Build/*
                destination: CppOverrideLinucBuild
            tasks:
            - fetch:
                is_file: false
                run_if: passed
                source: CppOverride
                destination: ''
                pipeline: CppOverridePipeline
                stage: CheckoutStage
                job: CheckoutJob
                artifact_origin: gocd
            
            # Setup for status notification
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      mkdir ./CppOverride/Build
                      cp ./CppOverride/.commit-id ./.commit-id
                      cp ./CppOverride/.commit-id ./CppOverride/Build/.commit-id
                    )
            
            # Building
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      pushd ./CppOverride/Build
                      cmake .. -DCPP_OVERRIDE_BUILD_EXAMPLE=ON -DCPP_OVERRIDE_BUILD_TEST=ON -DCPP_OVERRIDE_USE_SINGLE_HEADER=ON
                      popd
                    ) 2>&1 | tee -a ./ci.log
            
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      pushd ./CppOverride/Build
                      cmake --build . -j 16
                      popd
                    ) 2>&1 | tee -a ./ci.log
            
            - plugin: 
                <<: *NotifyPipelineStatus
                run_if: failed
            
    - TestStage:
        fetch_materials: false
        keep_artifacts: false
        clean_workspace: true
        approval:
          type: success
          allow_only_on_success: true
        jobs:
          LinuxTest:
            tasks:
            - fetch:
                is_file: false
                run_if: passed
                source: CppOverrideLinucBuild
                destination: ''
                pipeline: CppOverridePipeline
                stage: BuildStage
                job: LinuxBuildJob
                artifact_origin: gocd
            
            # Setup for status notification
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      cp ./CppOverrideLinucBuild/.commit-id ./.commit-id
                    )
            
            # Running tests
            - plugin:
                <<: *ShellRun
                run_if: passed
                options:
                  shtype: bash
                  script: |+
                    set -e
                    source ~/helpers.sh
                    (
                      chmod +x ./CppOverrideLinucBuild/RunAllTests.sh
                      pushd ./CppOverrideLinucBuild
                      ./RunAllTests.sh
                      popd

                    ) 2>&1 | tee -a ./ci.log

            - plugin: 
                <<: *NotifyPipelineStatus
                run_if: failed
            
            - plugin: 
                configuration:
                  id: script-executor
                  version: "1"
                run_if: passed
                options:
                  script: |+
                    set -e
                    source ~/helpers.sh
                    if [ ! -e ./ci.log ]; then
                      touch ./ci.log
                    fi

                    if [ ! -z "$PR_ID" ]; then
                      ~/Trigger_GH_PR_StatusPipeline.sh \
                      --status "passed" \
                      --commit "$(cat ./.commit-id)" \
                      --repo "CppOverride" \
                      --pr "$PR_ID" \
                      --stage "$GO_STAGE_NAME" \
                      --message "$(cat ./ci.log)"
                    fi